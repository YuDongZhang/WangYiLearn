/*
三种继承方式
一共有三种继承方式，分别是，公有继承，私有继承，保护继承，下面分别介绍下
公有继承

基类中公有成员，在派生类中也是公有成员，无论是派生类的成员函数还是派生类对象都可以访问
派生类的私有成员，无论是派生类的成员函数还是派生类的对象都不可以访问
派生类的保护成员，在派生类中依然是保护成员，可以通过派生类的成员函数访问，派生类对象不可以访问

私有继承

基类中的公有和保护类型，被派生类私有继承后，都变为派生类的私有类型，即在类的成员函数可以访问，但是不能再类外访问
基类的私有成员，在派生类无论是类外还是类内都不可以访问

可以看出如果为私有继承，则私有成员在派生类中都不可以使用，没有什么作用，这种情况使用较少
保护继承

基类的公有成员和保护类型成员在派生类中为保护类型成员
基类的私有成员在派生类中不可以直接访问
派生类的成员函数可以访问基类的公有成员和保护成员，但是在类外通过派生类的对象则无法访问他们，同样无论是派生类的成员函数还是对象都不可以访问基类的私有成员

作者：renxhui
链接：https://juejin.cn/post/6844904160031145992
来源：稀土掘金
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

派生类的构造函数
我们在创建一个派生类时，系统会首先创建一个基类，派生类会吸收所有基类的成员，但是不会吸收构造函数和析构函数，那么早调用派生类的构造函数之前，会先调用基类的构造函数，当基类的构造函数是带参数的，那么派生类就要明确指出父类的构造函数并且指定参数

作者：renxhui
链接：https://juejin.cn/post/6844904160031145992
来源：稀土掘金
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

*/

#include <iostream>
using namespace std;

class A{
public:
    
    int a;
    
    A(){
        cout<<"父类的无参构造函数"<<endl;
    }
    
    A(int a){
        this->a=a;
        cout<<"父类的有参构造函数"<<endl;
    }
};

class B:public A{
public:
    
    B(){
        cout<<"子类的无参构造"<<endl;
    }
    //指定父类带参构造和参数
    B(int a):A(a){
        cout<<"子类的有参构造函数"<<endl;
    }
};

int main(int argc, const char * argv[]) {
    B b;
    B b1(1);
    return 0;
}
